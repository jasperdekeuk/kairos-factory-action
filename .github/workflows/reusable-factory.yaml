name: Build Kairos Image

on:
  workflow_call:
    inputs:
      # Dockerfile path
      dockerfile_path:
        type: string
        default: "images/Dockerfile"
      
      # Core build parameters
      base_image:
        type: string
        default: "ubuntu:24.04"
      
      model:
        type: string
        default: "generic"
      
      arch:
        type: string
        default: "amd64"
      
      kubernetes_distro:
        type: string
        required: false
      
      kubernetes_version:
        type: string
        default: "auto"
      
      version:
        type: string
        required: true
      
      trusted_boot:
        type: boolean
        default: false
      
      # Individual artifact types
      iso:
        type: boolean
        default: false
      
      raw:
        type: boolean
        default: false
      
      vhd:
        type: boolean
        default: false
      
      gce:
        type: boolean
        default: false
      
      tar:
        type: boolean
        default: false
      
      output_format:
        type: string
        default: "auto"
      
      # Security and signing
      security_checks:
        type: string
        default: ""
      
      sign_artifacts:
        type: boolean
        default: false
      
      # Individual security checks
      cosign:
        type: boolean
        default: false
      
      grype:
        type: boolean
        default: false
      
      trivy:
        type: boolean
        default: false
      
      # Publishing
      registry_domain:
        type: string
        default: "quay.io"
        description: "Container registry domain to push to"
      
      registry_namespace:
        type: string
        default: "kairos"
        description: "Namespace/organization in the registry URL"
      
      registry_project:
        type: string
        required: false
        description: "Project name in the registry (defaults to $FLAVOR if not specified)"
      
      # Deprecated parameters for backward compatibility
      push_repository:
        type: string
        required: false
        description: "Deprecated: use registry_domain, registry_username, and registry_project instead"
      # Output and reporting
      summary_artifacts:
        type: boolean
        default: false
      
      auroraboot_version:
        type: string
        default: "latest"
      
      # Custom tag format
      custom_tag_format:
        type: string
        required: false
        description: "Custom tag format using variables like $FLAVOR_RELEASE, $VARIANT, $ARCH, $MODEL, $VERSION, $KUBERNETES_DISTRO, $KUBERNETES_VERSION, $UKI. If not provided, uses default format."

jobs:
  build:
    name: ${{ inputs.base_image }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: '0'

      - name: Validate inputs
        shell: bash
        run: |
          # Validate that Dockerfile exists
          if [ ! -f "${{ inputs.dockerfile_path }}" ]; then
            echo "❌ Error: Dockerfile not found at ${{ inputs.dockerfile_path }}"
            echo "   Current directory: $(pwd)"
            echo "   Directory contents: $(ls -la)"
            exit 1
          fi
          
          echo "✅ Found Dockerfile at ${{ inputs.dockerfile_path }}"
          
          # Validate required inputs
          if [[ -z "${{ inputs.version }}" ]]; then
            echo "❌ Error: version is required"
            exit 1
          fi
          
          # Validate kubernetes_distro values
          if [[ -n "${{ inputs.kubernetes_distro }}" ]]; then
            case "${{ inputs.kubernetes_distro }}" in
              k3s|k0s)
                ;;
              *)
                echo "❌ Error: kubernetes_distro must be 'k3s' or 'k0s'"
                exit 1
                ;;
            esac
          fi
          
          # Validate arch values
          case "${{ inputs.arch }}" in
            amd64|arm64)
              ;;
            *)
              echo "❌ Error: arch must be 'amd64' or 'arm64'"
              exit 1
              ;;
          esac
          
          echo "✅ Input validation passed"



      - name: Setup environment
        id: setup
        shell: bash
        run: |
          # Determine variant based on kubernetes_distro
          if [[ -n "${{ inputs.kubernetes_distro }}" ]]; then
            VARIANT="standard"
          else
            VARIANT="core"
          fi
          
          # Handle version resolution
          if [[ "${{ inputs.version }}" == "auto" ]]; then
            VERSION=$(git describe --tags --dirty --always)
          else
            VERSION="${{ inputs.version }}"
          fi
          
          # Handle kubernetes version resolution
          if [[ "${{ inputs.kubernetes_version }}" == "auto" ]]; then
            KUBERNETES_VERSION=""
          else
            KUBERNETES_VERSION="${{ inputs.kubernetes_version }}"
          fi
          
          # Split base image for tag generation
          BASE_IMAGE=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 1)
          TAG=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 2 || echo 'latest')
          
          # Handle special cases for base images with slashes
          if [[ "$BASE_IMAGE" == *"/"* ]]; then
            DISTRO=$(echo "$BASE_IMAGE" | cut -d '/' -f 1)
            SUB_DISTRO=$(echo "$BASE_IMAGE" | cut -d '/' -f 2)
            FLAVOR="$DISTRO"
            FLAVOR_RELEASE="$SUB_DISTRO-$TAG"
          else
            FLAVOR="$BASE_IMAGE"
            FLAVOR_RELEASE="$TAG"
          fi
          
          # Special case for nvidia
          if [[ "${{ inputs.model }}" == "nvidia-jetson-agx-orin" ]]; then
            FLAVOR="ubuntu"
            FLAVOR_RELEASE="22.04"
          fi
          
          # Generate image tag
          # Replace + with - in kubernetes version for tag compatibility
          SANITIZED_KUBERNETES_VERSION=$(echo "$KUBERNETES_VERSION" | sed 's/+/-/g')
          
          # Set UKI suffix if trusted boot is enabled
          UKI_SUFFIX=""
          if [[ "${{ inputs.trusted_boot }}" == "true" ]]; then
            UKI_SUFFIX="-uki"
          fi
          
          # Define variables for tag generation
          ARCH="${{ inputs.arch }}"
          MODEL="${{ inputs.model }}"
          KUBERNETES_DISTRO="${{ inputs.kubernetes_distro }}"
          UKI="$UKI_SUFFIX"
          
          # Generate default tag
          if [[ -n "$KUBERNETES_VERSION" ]]; then
            DEFAULT_TAG="$FLAVOR_RELEASE-$VARIANT-$ARCH-$MODEL-$VERSION-$KUBERNETES_DISTRO-$SANITIZED_KUBERNETES_VERSION$UKI"
          else
            DEFAULT_TAG="$FLAVOR_RELEASE-$VARIANT-$ARCH-$MODEL-$VERSION$UKI"
          fi
          
          # Use custom tag format if provided, otherwise use default
          if [[ -n "${{ inputs.custom_tag_format }}" ]]; then
            # Replace variables in custom format
            CUSTOM_TAG="${{ inputs.custom_tag_format }}"
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$FLAVOR_RELEASE/$FLAVOR_RELEASE/g")
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$VARIANT/$VARIANT/g")
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$ARCH/$ARCH/g")
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$MODEL/$MODEL/g")
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$VERSION/$VERSION/g")
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$KUBERNETES_DISTRO/$KUBERNETES_DISTRO/g")
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$KUBERNETES_VERSION/$SANITIZED_KUBERNETES_VERSION/g")
            CUSTOM_TAG=$(echo "$CUSTOM_TAG" | sed "s/\$UKI/$UKI/g")
            TAG="$CUSTOM_TAG"
          else
            TAG="$DEFAULT_TAG"
          fi
          
          # Determine registry, namespace, and project
          REGISTRY="${{ inputs.registry_domain }}"
          NAMESPACE="${{ inputs.registry_namespace }}"
          
          # Use registry_project if specified, otherwise use FLAVOR
          if [[ -n "${{ inputs.registry_project }}" ]]; then
            PROJECT="${{ inputs.registry_project }}"
          else
            PROJECT="$FLAVOR"
          fi
          
          # Build image tag
          IMAGE_TAG="$REGISTRY/$NAMESPACE/$PROJECT:$TAG"
          
          # Export variables
          echo "variant=$VARIANT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "kubernetes_version=$KUBERNETES_VERSION" >> $GITHUB_OUTPUT
          echo "flavor=$FLAVOR" >> $GITHUB_OUTPUT
          echo "flavor_release=$FLAVOR_RELEASE" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          echo "🔧 Environment setup complete"
          echo "   Variant: $VARIANT"
          echo "   Version: $VERSION"
          echo "   Registry: $REGISTRY"
          echo "   Namespace: $NAMESPACE"
          echo "   Project: $PROJECT"
          echo "   Default Tag: $DEFAULT_TAG"
          if [[ -n "${{ inputs.custom_tag_format }}" ]]; then
            echo "   Custom Tag Format: ${{ inputs.custom_tag_format }}"
            echo "   Final Tag: $TAG"
          fi
          echo "   Image Tag: $IMAGE_TAG"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          platforms: linux/${{ inputs.arch }}

      - name: Login to registry
        if: inputs.registry_domain != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry_domain }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build Kairos image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile_path }}
          platforms: linux/${{ inputs.arch }}
          push: ${{ inputs.registry_domain != '' }}
          load: ${{ inputs.registry_domain == '' }}
          tags: ${{ steps.setup.outputs.image_tag }}
          build-args: |
            BASE_IMAGE=${{ inputs.base_image }}
            MODEL=${{ inputs.model }}
            KUBERNETES_VERSION=${{ steps.setup.outputs.kubernetes_version }}
            KUBERNETES_DISTRO=${{ inputs.kubernetes_distro }}
            TRUSTED_BOOT=${{ inputs.trusted_boot }}
            VERSION=${{ steps.setup.outputs.version }}

      - name: Run Grype security scan
        if: inputs.grype
        uses: anchore/scan-action@v6.3.0
        with:
          image: ${{ steps.setup.outputs.image_tag }}
          output-format: json
          severity-cutoff: critical
          add-cpes-if-none: true
          only-fixed: true
          fail-build: false
      - name: Grype detailed check
        if: inputs.grype
        run: |
          jq -r '.matches[] | select(.vulnerability.severity == "Critical") | "\(.vulnerability.id) \t \(.artifact.name) \(.artifact.version) -> \(.artifact.locations[]?.path // "no-path")"' "${{ steps.grype.outputs.json }}" | tee grype-critical.txt

          if [[ $(wc -l < grype-critical.txt) -gt 0 ]]; then
            echo "Critical vulnerabilities found in the image. Failing the build."
            exit 1
          else
            echo "No critical vulnerabilities found in the image."
          fi

      - name: Run Trivy security scan
        if: inputs.trivy
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37 # 0.31.0
        with:
          image-ref: ${{ steps.setup.outputs.image_tag }}
          format: sarif
          output: trivy.sarif
          severity: CRITICAL
          limit-severities-for-sarif: true

      - name: Generate ISO artifact
        if: inputs.iso && inputs.model == 'generic'
        shell: bash
        run: |
          echo "🔍 Debug: Starting ISO generation step"
          echo "   Inputs: iso=${{ inputs.iso }}, model=${{ inputs.model }}"
          echo "   Image tag: ${{ steps.setup.outputs.image_tag }}"
          
          mkdir -p artifacts
          echo "📦 Building ISO artifact..."
          echo "   Using image: ${{ steps.setup.outputs.image_tag }}"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/artifacts:/output \
            quay.io/kairos/auroraboot:${{ inputs.auroraboot_version }} \
            --debug build-iso --output /output/ \
            docker:${{ steps.setup.outputs.image_tag }}
          
          ISO_FILE=$(ls artifacts/*.iso | head -1)
          if [[ -n "$ISO_FILE" ]]; then
            echo "✅ ISO generated: $ISO_FILE"
          else
            echo "❌ Error: No ISO file found in artifacts directory"
            echo "   Artifacts directory contents:"
            ls -la artifacts/ || echo "   Artifacts directory is empty or doesn't exist"
            exit 1
          fi

      - name: Generate RAW artifact
        if: inputs.raw && inputs.model != 'rpi3' && inputs.model != 'generic' && inputs.model != 'nvidia-jetson-agx-orin'
        shell: bash
        run: |
          mkdir -p artifacts
          echo "📦 Building RAW artifact..."
          docker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/artifacts:/output \
            quay.io/kairos/auroraboot:${{ inputs.auroraboot_version }} \
            --debug \
            --set "disable_http_server=true" \
            --set "disable_netboot=true" \
            --set "container_image=${{ steps.setup.outputs.image_tag }}" \
            --set "state_dir=/output" \
            --set "disk.raw=true"
          
          RAW_FILE=$(ls artifacts/*.raw | head -1)
          if [[ -n "$RAW_FILE" ]]; then
            echo "✅ RAW generated: $RAW_FILE"
          fi

      - name: Generate VHD artifact
        if: inputs.vhd
        shell: bash
        run: |
          echo "📦 Building VHD artifact..."
          echo "⚠️  VHD generation not yet implemented"

      - name: Generate GCE artifact
        if: inputs.gce
        shell: bash
        run: |
          echo "📦 Building GCE artifact..."
          echo "⚠️  GCE generation not yet implemented"

      - name: Generate TAR artifact
        if: inputs.tar
        shell: bash
        run: |
          echo "📦 Building TAR artifact..."
          echo "⚠️  TAR generation not yet implemented"

      - name: Sign artifacts with cosign
        if: inputs.sign_artifacts || inputs.cosign
        shell: bash
        run: |
          # Install cosign
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          
          # Sign image
          cosign sign ${{ steps.setup.outputs.image_tag }}
          
          # Sign generated artifacts
          for artifact in artifacts/*.iso artifacts/*.raw artifacts/*.vhd artifacts/*.tar; do
            if [[ -f "$artifact" ]]; then
              cosign sign-blob --yes --output-certificate="${artifact}.pem" --output-signature="${artifact}.sig" "$artifact"
              echo "✅ Signed: $artifact"
            fi
          done

      - name: Generate GitHub summary
        if: inputs.summary_artifacts
        shell: bash
        run: |
          SUMMARY="## 🏭 Kairos Factory Build Summary\n\n"
          SUMMARY+="**Image:** \`${{ steps.setup.outputs.image_tag }}\`\n\n"
          SUMMARY+="**Configuration:**\n"
          SUMMARY+="- Base Image: \`${{ inputs.base_image }}\`\n"
          SUMMARY+="- Model: \`${{ inputs.model }}\`\n"
          SUMMARY+="- Architecture: \`${{ inputs.arch }}\`\n"
          SUMMARY+="- Variant: \`${{ steps.setup.outputs.variant }}\`\n"
          SUMMARY+="- Version: \`${{ steps.setup.outputs.version }}\`\n"
          
          if [[ -n "${{ inputs.kubernetes_distro }}" ]]; then
            SUMMARY+="- Kubernetes: \`${{ inputs.kubernetes_distro }}\` \`${{ steps.setup.outputs.kubernetes_version }}\`\n"
          fi
          
          if [[ "${{ inputs.trusted_boot }}" == "true" ]]; then
            SUMMARY+="- Trusted Boot: ✅ Enabled\n"
          fi
          
          SUMMARY+="\n**Generated Artifacts:**\n"
          
          ARTIFACT_COUNT=0
          for artifact in artifacts/*.iso artifacts/*.raw artifacts/*.vhd artifacts/*.tar; do
            if [[ -f "$artifact" ]]; then
              SUMMARY+="- \`$(basename "$artifact")\`\n"
              ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
            fi
          done
          
          if [[ $ARTIFACT_COUNT -eq 0 ]]; then
            SUMMARY+="- No artifacts generated\n"
          fi
          
          if [[ "${{ steps.process-inputs.outputs.sign_artifacts }}" == "true" ]]; then
            SUMMARY+="\n**Security:**\n"
            SUMMARY+="- ✅ Image signed with cosign\n"
            # Check if any artifacts exist for signing
            if ls artifacts/*.iso artifacts/*.raw artifacts/*.vhd artifacts/*.tar 2>/dev/null | grep -q .; then
              SUMMARY+="- ✅ Artifacts signed with cosign\n"
            fi
          fi
          
          # Check which security scans were run
          SECURITY_SCANS=()
          if [[ "${{ inputs.grype }}" == "true" ]]; then
            SECURITY_SCANS+=("grype")
          fi
          if [[ "${{ inputs.trivy }}" == "true" ]]; then
            SECURITY_SCANS+=("trivy")
          fi
          
          if [[ ${#SECURITY_SCANS[@]} -gt 0 ]]; then
            SUMMARY+="\n**Security Scans:**\n"
            for check in "${SECURITY_SCANS[@]}"; do
              SUMMARY+="- ✅ $check scan completed\n"
            done
          fi
          
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Upload artifacts
        if: inputs.iso || inputs.raw || inputs.vhd || inputs.gce || inputs.tar
        uses: actions/upload-artifact@v4
        with:
          name: kairos-artifacts-${{ steps.setup.outputs.flavor }}-${{ steps.setup.outputs.flavor_release }}-${{ steps.setup.outputs.variant }}-${{ inputs.arch }}-${{ inputs.model }}
          path: artifacts/
          if-no-files-found: warn 